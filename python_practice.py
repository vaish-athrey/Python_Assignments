# -*- coding: utf-8 -*-
"""Python Workshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NS3YXrMn39D5iZO_gZESL8WsHyTOnsY5

APPLICATIONS OF PYTHON :

    web development (server-side),
    software development,
    mathematics,
    system scripting.


---

Different ways to use Python :

    Command Line Interpreter,
    Script file,
    Jupyter notebook


---
"""

Single line comments starts with '#'
# Single line comment



Text written inside triple quotes are treated as multi line comment

"""
Multiple
line
comment
"""

"""

---

"""

# Variables
# In python declaration of data type for variable is not required, variable can
# change their data type during execution of program

i_am_a_variable = 1
i_am_a_variable = "now I am string"

# multiple variables can be initialised in this manner
a, b = 1 , "Hello"

"""

---


"""

# Output

# print() is used to print value of variables and constants
print("HELLO WORLD !!!")

# parameter 'end' is used to specify ending character of print statement
print("Hello", end="__")
print("World")

# Variables of same type can be printed like this
print("hello" + " world")
print("hello " * 5 )

# variables of different type can be printed by saparating
# them with comma
print("World"+1)



# Input

# input() is used to take input from user
variable = input("Enter the value")

# all input from user are stored in form of String
print(variable)
print(type(variable))

"""

---

"""

# Data Types

x = "Hello World"                    	#str
x = 20 	                              #int
x = 20.5 	                            #float
x = ["apple", "banana", "cherry"] 	  #list
x = ("apple", "banana", "cherry") 	  #tuple
x = range(6) 	                        #range
x = {"name" : "John", "age" : 36} 	  #dict
x = {"apple", "banana", "cherry"} 	  #set
x = True 	                            #bool

# To verify the type of any object in Python, use the type() function:
print(type(x))

"""

---

"""

# Strings

str1 = "hello"
str2 = ' World'
str3 = str1 + str2   # "hello World"

print(str3[0])


# You can return a range of characters by using the slice syntax.
#  str3[start:end] or
#  str3[start:end:step]

print( str3[1:5] )  # prints characters at position 1,2,3,4 (end is not included)
print( str3[ :5] )   # blank start indicate from first character
print( str3[1:5] )  # blank end indicate till last character
print( str3[1:-1] )  # negative end indicate character from end

print( str3[::2] )  # step indicate
print( str3[::-1] ) # negative step indicate reverse direction

# To get the length of a string, use the len() function.
print( len(str3)   )


#########################################
# String methods

a = "      This is A SAmPLE string  !!! ";

# The strip() method removes any whitespace from the beginning or the end:
print(a.strip())


# The lower() method returns the string in lower case:
print(a.lower())


# The upper() method returns the string in upper case:
print(a.upper())

# The replace() method replaces a string with another string:
print(a.replace("i", "XXX"))

# The split() method splits the string into substrings if it finds instances of the separator:
print(a.split(" "))

# Check if a phrase is present in the following text:
print("string" in a )


# Further reading
# https://www.w3schools.com/python/python_strings.asp

# Numbers

# Int, or integer, is a whole number, positive or negative,
# without decimals, of unlimited length.
integers = 1
print(type(integers))
integers = 100000000000000000000000000000000


# Float, or "floating point number" is a number, positive or
# negative, containing one or more decimals.
# Float can also be scientific numbers with an "e" to
# indicate the power of 10.
float_var = 11.0
print(type(float_var))

float_var = -5.7e-3
print(float_var)

"""

---

"""

# type conversion

# You can convert from one type to another with the int(), float(), str()


# string to integer
no = input("Enter a number : ")
int_no = int(no)
print("converted", type(no) , "to", type(int_no) ,":", int_no  )


# string to float
float_no = float(no)
print("converted", type(no) , "to", type(float_no) ,":", float_no  )


int_value = 11*110
str_value = str(int_value)
print("converted", type(int_value) , "to", type(str_value) ,":", str_value )

"""# [OPERATORS](https://www.w3schools.com/python/python_operators.asp)"""

############################################################
# LISTS [ ]
# List is a collection which is ordered and changeable. Allows duplicate members.

thislist  = list()  # empty list

thislist =[ 121 , "banana", "cherry", "orange", "kiwi", "melon"]
print(thislist)
print(thislist[1])
print(thislist[-1])
print(thislist[2:5])

# Append method adds new element to a list
thislist.append("John Wick")

# insert method adds new element at given index
thislist.insert(1, "Sherlock")

# insert method removes given element
thislist.remove("banana")

# pop method removes element from given index / last position
thislist.pop()
thislist.pop(3)

for x in thislist:
  print(x)


# multidimentional list

L = [
     [1,2,3],
     [4,5,6],
     [7,8,9]
]



# Further reading
# https://www.w3schools.com/python/python_lists.asp

############################################################
# TUPLE ( )
# Tuple is a collection which is ordered and unchangeable. Allows duplicate members.

thistuple = tuple() # empty tuple

thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple)
print(thistuple[1])
print(thistuple[2:5])

for x in thistuple:
  print(x)

# Once a tuple is created, you cannot change its values. Tuples are unchangeable,
#  or immutable as it also is called.

############################################################
# Sets {  }
# Set is a collection which is unordered and unindexed. No duplicate members.


thisset = {"apple", "banana", "cherry"}
print(thisset)

# Sets are unordered, so you cannot be sure in which order the items will appear.
# print(thisset[0])

for x in thisset:
  print(x)

# Add an item to a set, using the add() method:
thisset.add("orange")

# Add multiple items to a set, using the update() method:
thisset.update(["orange", "mango", "grapes"])

# Get the number of items in a set:
print(len(thisset))

# Remove "banana" by using the remove() method:
thisset.remove("banana")


# Set operations

set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set3 = set1.union(set2)

set4 = set3.intersection(set1)


# furter reading
# https://www.w3schools.com/python/python_sets.asp

# Dictionary

# A dictionary is a collection which is unordered, changeable and indexed.
# In Python dictionaries are written with curly brackets, and they have keys and values.

thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict, thisdict["model"])


for x,y in thisdict.items():
  print(x,y)


# Nested Dictionary
myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

# logical conditions
# a == b     a != b
# a < b      a > b
# a <= b     a >= b

# If Statement

a = 9
b = 6

# Python relies on indentation (whitespace at the beginning of a line)
# to define scope in the code. Other programming languages often use
# curly-brackets for this purpose.

else if a==b :
  print("a and b are equal")

elif type(a) != type(b):
  print("a and b are of different type")

elif a < b or b>a:
  print("a and b are not equal")

elif a < b and b > a:
  print("This is not possible")

else :
  pass
  # use "pass" to keep empty statement

# For loop

# loop through elements of list
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
print("----------------")
# loop through characters of string
for x in "banana":
  print(x)

# to run loop n number of times
print("----------------")
for x in range(6):
  print(x)

# to run loop over a range use range(start.end,step)
print("----------------")
for x in range(2,10):
  print(x)

print("----------------")
for x in range(2,10,2):
  print(x)


for x in range(2,10,2):
  print(x)

print("----------------")
for x in range(50):

  if x%10 != 0 :
    pass

  elif x == 30:
    print("out of loop at 30")
    break

  else:
    print(x)

# python functions

# Function Declaration
def PrintInRange(From, To, step=1):

  for i in range(From,To,step):
    print(i)

  return To-From


# Function calling
rangeValue = PrintInRange(3,6)



# Lambda function

# lambda arguments : expression
x = lambda a : a + 10
print(x(5))

 x = lambda a, b : a * b
print(x(5, 6))

# IndentationError: expected an indented block
if int("11") == 11:
print("equal")

# IndentationError: inconsistent use of tabs and spaces in indentation
if int("11") == 11:
    print("equal")
    print("values")

# IndexError: list index out of range
A_list = ['cat','rat','bat']
A_list[4]

# ModuleNotFoundError
import Numpy as np

# TypeError
print("12" + 22 )

# ValueError : invalid literal for int() with base 10:
print(int("Non-Integer"))

